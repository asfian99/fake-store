[{"/home/asfian99/Documents/WebDev/fake-store/src/redux/cartSlice.ts":"1","/home/asfian99/Documents/WebDev/fake-store/src/components/product.tsx":"2","/home/asfian99/Documents/WebDev/fake-store/src/components/navbar.tsx":"3","/home/asfian99/Documents/WebDev/fake-store/src/components/drawer.tsx":"4","/home/asfian99/Documents/WebDev/fake-store/src/components/cartItem.tsx":"5","/home/asfian99/Documents/WebDev/fake-store/src/App.tsx":"6","/home/asfian99/Documents/WebDev/fake-store/src/index.tsx":"7"},{"size":1495,"mtime":1614417345092,"results":"8","hashOfConfig":"9"},{"size":1935,"mtime":1614418914920,"results":"10","hashOfConfig":"9"},{"size":825,"mtime":1614416481505,"results":"11","hashOfConfig":"9"},{"size":2048,"mtime":1614417493607,"results":"12","hashOfConfig":"9"},{"size":2208,"mtime":1614418904404,"results":"13","hashOfConfig":"9"},{"size":1875,"mtime":1614416857042,"results":"14","hashOfConfig":"9"},{"size":1059,"mtime":1614418940131,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"hb9c7w",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/asfian99/Documents/WebDev/fake-store/src/redux/cartSlice.ts",["31"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"./store\";\nimport type { ProductItemType } from \"../AppType\";\n\n// Define a type for the slice state\ninterface CartState {\n  items?: ProductItemType[];\n}\n\n// Define the initial state using that type\nconst initialState: CartState = {\n  items: [],\n};\n\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    // increment: (state) => {\n    //   state.value += 1;\n    // },\n    // decrement: (state) => {\n    //   state.value -= 1;\n    // },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      // state.value += action.payload;\n    },\n    addToCart: (state, action: PayloadAction<ProductItemType>) => {\n      state.items?.push(action.payload);\n    },\n    deleteFromCart: (state, action: PayloadAction<number>) => {\n      const newItems = state.items?.filter(\n        (item) => item.id !== action.payload\n      );\n      state.items = newItems;\n    },\n    clearCart: (state) => {\n      state.items = [];\n    },\n  },\n});\n\nexport const {\n  incrementByAmount,\n  addToCart,\n  deleteFromCart,\n  clearCart,\n} = cartSlice.actions;\n\n// Other code such as selectors can use the imported `RootState` type\n// export const selectCount = (state: RootState) => state.counter.value;\n\nexport default cartSlice.reducer;\n","/home/asfian99/Documents/WebDev/fake-store/src/components/product.tsx",[],"/home/asfian99/Documents/WebDev/fake-store/src/components/navbar.tsx",[],"/home/asfian99/Documents/WebDev/fake-store/src/components/drawer.tsx",[],"/home/asfian99/Documents/WebDev/fake-store/src/components/cartItem.tsx",[],"/home/asfian99/Documents/WebDev/fake-store/src/App.tsx",[],"/home/asfian99/Documents/WebDev/fake-store/src/index.tsx",[],{"ruleId":"32","severity":1,"message":"33","line":2,"column":10,"nodeType":"34","messageId":"35","endLine":2,"endColumn":19},"@typescript-eslint/no-unused-vars","'RootState' is defined but never used.","Identifier","unusedVar"]